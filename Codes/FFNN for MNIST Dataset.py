# -*- coding: utf-8 -*-
"""3.1 FFNN for MNIST dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11m7jj4OF5lngXXIWjMCOgf7ZprPkPcEy
"""

from keras.datasets import mnist
#loading the mnist dataset

(train_data, train_target),(test_data, test_target) = mnist.load_data()
#spliting the dataset into training and testing

from matplotlib import pyplot as plt

plt.imshow(train_data[0],cmap='gray')
plt.show()

print(train_target[0])

train_data= train_data / 255.0 
test_data=test_data/255.0
#Scaling the 0-255 gray image to 0-1 (Requirement before training the Neural Network)

from keras.models import Sequential
#loading Sequential model from keras
from keras.layers import Flatten,Dense
#loading Flatten and Dense layers from keras

model = models.Sequential()
#creating a Sequential type neural network (a empty neural network, add layer by layer)
model.add(Flatten(input_shape=(28, 28)))
#a flatten layer to flatten up the 28x28 input image into 784 inputs
model.add(Dense(512, activation='relu'))
#1st Hidden layer with 512 Neurons
model.add(Dense(256, activation='relu'))
#2nd Hidden layer with 256 Neurons
model.add(Dense(10, activation='softmax'))
#output layer with 10 output neurons
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])
#compiling the neural network with necessary parameters

model.summary()
#neural network architecture and parameters

from keras.utils import to_categorical

train_target=to_categorical(train_target)
#convering the labels into a categorical representation

history=model.fit(train_data, train_target, epochs=50)
#training the neural network for 50 epochs

results=model.predict(test_data)
print(results[:10])
#testing and getting results using unseen data

import numpy as np
results=np.argmax(results,axis=1)

print(test_target[:10])
print(results[:10])

from sklearn.metrics import accuracy_score
accuracy=accuracy_score(test_target,results)
print('Accuracy:',accuracy)
#getting the accuracy between the actual and predicted results

from matplotlib import pyplot as plt

plt.plot(history.history['loss'])
plt.xlabel('# epochs')
plt.ylabel('loss')
#visualizing the loss

plt.plot(history.history['acc'])
plt.xlabel('# epochs')
plt.ylabel('accuracy')
#visualizing the accuracy

